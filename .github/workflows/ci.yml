name: CI/CD Pipeline

on:
  push:
    branches: [main, test-ci-pipeline]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [main, test-ci-pipeline]

env:
  REGISTRY: ghcr.io
  API_IMAGE_NAME: real-talk-api
  WEB_IMAGE_NAME: real-talk-web
  NODE_VERSION: 22.17.0
  PNPM_VERSION: 8

jobs:
  # Validation job to catch issues early
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install
        
      - name: Check for package.json changes
        id: package-changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            api:
              - 'packages/api/package.json'
            web:
              - 'packages/web/package.json'
              
      - name: Generate Prisma client
        run: cd packages/api && pnpm prisma:generate
        
      - name: Check TypeScript compilation
        run: |
          cd packages/api && pnpm tsc --noEmit
          cd ../web && pnpm tsc --noEmit
  # Tests job for API package
  test-api:
    runs-on: ubuntu-latest
    needs: validate
    services:
      # Setup PostgreSQL service for tests
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: realtalk_test
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/realtalk_test
      NODE_ENV: test
      CLERK_JWT_SECRET: test_jwt_secret
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install
        
      - name: Generate Prisma client
        run: cd packages/api && pnpm prisma:generate
        
      - name: Setup database schema
        run: cd packages/api && pnpm prisma:db:push

      - name: Run lint
        run: cd packages/api && pnpm lint
        
      - name: Run unit tests with coverage
        run: cd packages/api && pnpm test:unit -- --coverage
        
      - name: Upload test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: api-test-coverage
          path: packages/api/coverage
          retention-days: 7

  # Tests job for web package
  test-web:
    runs-on: ubuntu-latest
    needs: validate
    env:
      NODE_ENV: test
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_dummy-key
      CLERK_SECRET_KEY: sk_test_dummy-key
      NEXT_PUBLIC_API_URL: http://localhost:3000/graphql
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install
        
      - name: Run lint
        run: cd packages/web && pnpm lint
        
      - name: Generate GraphQL types
        run: cd packages/web && pnpm codegen || echo "Codegen failed but continuing build"

      - name: Run tests with coverage
        run: cd packages/web && pnpm test -- --coverage
        
      - name: Upload test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: web-test-coverage
          path: packages/web/coverage
          retention-days: 7

  # Build and push Docker images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-api, test-web]
    if: github.event_name == 'push' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Extract metadata for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.API_IMAGE_NAME }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.WEB_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create .env files
        run: |
          echo "${{ secrets.ENV_FILE }}" > packages/api/.env
          echo "${{ secrets.ENV_FILE }}" > packages/web/.env

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: packages/api
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.API_IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.API_IMAGE_NAME }}:latest
            ${{ startsWith(github.ref, 'refs/tags/v') && format('{0}/{1}/{2}:{3}', env.REGISTRY, github.repository_owner, env.API_IMAGE_NAME, github.ref_name) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            NODE_ENV=production

      - name: Build and push web image
        uses: docker/build-push-action@v5
        with:
          context: packages/web
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.WEB_IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.WEB_IMAGE_NAME }}:latest
            ${{ startsWith(github.ref, 'refs/tags/v') && format('{0}/{1}/{2}:{3}', env.REGISTRY, github.repository_owner, env.WEB_IMAGE_NAME, github.ref_name) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            NODE_ENV=production
