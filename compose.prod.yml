services:
  api:
    build:
      context: ./
      dockerfile: packages/api/Dockerfile
      target: production
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      NODE_ENV: production
    depends_on:
      - db
      - rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    build:
      context: ./
      dockerfile: packages/web/Dockerfile
      target: production
    ports:
      - "3001:3000"
    env_file:
      - .env
    environment:
      NODE_ENV: production
    depends_on:
      - api
    networks:
      - app-network

  db:
    image: postgres:17-alpine
    container_name: db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  rabbitmq:
    image: rabbitmq:3.13.7-management-alpine
    container_name: rabbitmq_broker
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-/}
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  app-network:
    driver: bridge
